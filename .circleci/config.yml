version: 2.1

orbs:
  slack: circleci/slack@4.12.5
  gcp-cli: circleci/gcp-cli@3.1.1

commands:
  notify_on_success_command:
    steps:
      - slack/notify:
          event: pass
          channel: C04TQUD2525
          template: basic_success_1
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: C04TQUD2525
          template: basic_fail_1
  
  install_terraform:
    description: Install Terraform
    steps:
      - run:
          name: Install Terraform
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update
            sudo apt-get install terraform

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt upgrade
            sudo apt install software-properties-common -y
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install nodejs
    steps:
      - run:
          name: Install nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # gsutil -m rm -a gs://udapeople-<<parameters.Workflow_ID>>/**
            terraform -chdir=.circleci/files/back-end destroy  -auto-approve
            terraform -chdir=.circleci/files/front-end destroy -var="ID=<<parameters.Workflow_ID>>" -auto-approve

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end unit test
          command: |
            cd frontend
            npm install
            npm test
      - notify_on_failure
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end unit test
          command: |
             cd backend
             npm install
             npm test
      - notify_on_failure
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end unit test
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end unit test
          command: |
             cd backend
             npm install
             npm audit fix --force --audit-level=critical
      - notify_on_failure

  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - notify_on_success_command

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    executor: gcp-cli/default
    steps:
      - checkout 
      - install_terraform
      - gcp-cli/setup:
          version: 404.0.0
      - run:
          name: Set up Google Service Account key
          command: |
            mkdir -p /tmp/workspace
            echo $GCLOUD_SERVICE_KEY > /tmp/workspace/service-account-key.json
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            terraform -chdir=.circleci/files/back-end init
            terraform -chdir=.circleci/files/back-end apply -auto-approve

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            terraform -chdir=.circleci/files/front-end init
            terraform -chdir=.circleci/files/front-end apply -var="ID=${CIRCLE_WORKFLOW_ID:0:5}" -auto-approve 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            gcloud compute instances describe back-end --format='get(networkInterfaces[0].accessConfigs[0].natIP)' >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    executor: gcp-cli/default
    steps:
      - checkout
      - install_ansible
      - install_terraform
      - gcp-cli/setup:
          version: 404.0.0
      - add_ssh_keys:
          fingerprints: ["ab:61:a7:bf:35:57:56:d6:6a:38:49:e0:bf:5e:16:20"]
      - attach_workspace:
          at: ~/
      - run:
          name: Run Configure Server Ansible play
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_terraform
      - gcp-cli/setup:
          version: 404.0.0
      - run:
          name: Set up Google Service Account key
          command: |
            mkdir -p /tmp/workspace
            echo $GCLOUD_SERVICE_KEY > /tmp/workspace/service-account-key.json
      - run:
          name: Run migrations
          command: |
            export TYPEORM_HOST=$(gcloud compute instances describe back-end --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
            echo " here is the server ip $TYPEORM_HOST"
            cd backend
            npm install
            npm run premigrations
            npm run migrations > migrations_dump.txt
            echo ################################
            cat migrations_dump.txt 
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -d '1' https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:5}
            else
              echo "No migrations are pending" 
            fi
      - destroy-environment
      - revert-migrations   

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_nodejs 
      - gcp-cli/setup:
          version: 404.0.0
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_PUBLIC_IP=$(gcloud compute instances describe back-end --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            cd frontend
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            ls -a
      - run:
          name: Deploy frontend objects
          command: |
            export BACKEND_PUBLIC_IP=$(gcloud compute instances describe back-end --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            cd frontend
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            ls -al
            cat .env
            npm install
            npm run build:prod
            gsutil cp -r dist gs://udapeople-${CIRCLE_WORKFLOW_ID:0:5}
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_terraform
      - install_nodejs
      - gcp-cli/setup:
          version: 404.0.0
      - add_ssh_keys:
          fingerprints: ["ab:61:a7:bf:35:57:56:d6:6a:38:49:e0:bf:5e:16:20"]
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_HOST=$(gcloud compute instances describe back-end --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
            echo $TYPEORM_HOST
            echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt

            cd backend
            npm install
            npm run build
            # echo "TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}" > .env
            # echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            # echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            # echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            # echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            # echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            # echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
            # echo "TYPEORM_MIGRATIONS=./dist/migrations/*{.ts,.ts}" >> .env

            export TYPEORM_MIGRATIONS_DIR=./dist/migrations
            export TYPEORM_MIGRATIONS=./dist/migrations/*.ts
            export TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}

            tar -czf artifact.tar.gz dist/* package*
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ../.circleci/ansible/roles/deploy/
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - notify_on_success:
      #     requires:
      #       - test-frontend
      #       - test-backend
      #       - scan-frontend
      #       - scan-backend
      # - deploy-infrastructure:
      #     # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]

      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]